Reactってなに
・UI（画面）を部品=コンポーネントで組み立てるためのライブラリ
・「状態（state）」というデータが変わると、必要な所だけ画面を描き直す
・HTMLに似たJSXという書き方を使って、JavaScriptの中にUIを表現する

・SPA（ページ遷移の少ないアプリ）や、入力フォームが多いダッシュボード、検索
フィルタ、ソートなど動くUIを作るときに強い
・既存のHTML/CSS/JSにも後から少しずつ導入できる

基本のキーワード
・コンポーネント：見た目+振る舞いをひとまとまりにした”部品"(関数として書くのが主流)
・JSX：<div>こんにちは</div>のようにHTMLっぽく書ける文法（{}でJS式を書ける）。
・props：親→子へ渡す"引数"。コンポーネントの入力。
・state：コンポーネントの"内部の変化する値"。useStateで作る。
・イベント：onClickなどでボタンクリック時の処理を書く。
・リストとkey：array.map()で並べる時、keyは要素を一意に識別するために必須。

新規プロジェクト作成
npm create vite@latest my-react-app -- --template react-ts

viteがTypeScript+React用の最小プロジェクトを丸ごと作成。
中身の構成
my-react-app/
├─ .gitignore
├─ index.html
├─ package.json
├─ tsconfig.json
├─ tsconfig.node.json
├─ vite.config.ts
├─ public/
│   └─ vite.svg                # そのまま配信される静的ファイル置き場
└─ src/
    ├─ App.tsx                 # 最初に表示されるReactコンポーネント
    ├─ main.tsx                # Reactを #root にマウントする起点
    ├─ index.css               # 全体CSS（テンプレにより存在）
    └─ assets/
        └─ react.svg           # サンプル画像

主要ファイルの役割
・index.html
　一枚だけの土台HTML。<div id="root"></div>があり、Reactはここに差し込まれる
　下部でsrc/main.tsxをES Modulesで読み込む。
・src/main.tsx
　画面の"最初の部品"。ここを書き換えると表示が変わる（HMRで即反映）。
・vite.config.ts
　Viteの設定。React用プログインが有効化されている。
・tsconfig.json/tsconfig.node.json
　TypeScriptのコンパイル設定。React向けにjsx: "react-jsx"などが入っており、"strict: trueで型を厳格にチェックする。
・public/
　ビルドせずにそのまま配置したいファイル（画像やアイコン等）を置く場所。
・gitgnore
　Gitで追跡しないものが最初から設定されている。
・package.json
　依存パッケージとスクリプト。最初は宣言だけで、まだnode_modules/はない（次のnpm installで入る）

ここまでは雛形ができた状態。まだ依存パッケージ本体は入っていない。
　

新規プロジェクトに移動
cd my-react-app

依存インストール＆起動
npm install
npm run dev

npm installで作られるもの・起きること
package.jsonに宣言された依存を実体としてインストールする。
・node_modules/(新規作成)
　実際のライブラリ（React,react-dom,vite,typescript,型定義など）が全部ここに入る。
　巨大になるが手で触らない
・package-lock.json（新規作成or更新）
　依存の確定版のバージョン表。チームで同じ環境を再現するためにGitでコミットする。
・以降の実行が可能に：
　・npm run dev 開発サーバ（HMRA）
　・npm run build 本番ビルド（dist/が作成）
　・npm run preview ビルド結果のローカル確認
dist/はnpm run buildを実行したときに初めて作られる。npm installではできない

触るべき場所vs触らない場所（最初の判断基準）
よく触る：src/（App.tsx, main.tsx, CSS など）
たまに触る：index.html（メタタグやフォント追加など）、vite.config.ts（別名インポート等）
時々見る：package.json（スクリプト追加、依存追加時）
触らない：node_modules/（自動生成・削除OK・Gitに入れない）

よく使う移動パターン(cd)
cd path/to/dir   # 指定ディレクトリへ移動（相対パス）
cd /abs/path     # 絶対パスで移動
cd ..            # 1つ上の階層へ
cd ../..         # 2つ上へ
cd ~             # ホームへ（= /Users/impudentlife）
cd -             # 直前にいた場所へ戻る（トグル）
cd               # 引数なしもホームへ


TypeScriptでReactに入門するチュートリアル
https://qiita.com/yonetty/items/012be4c5c6258a609e35

スターターコードを確認
スターターコードではコンポーネントのひな型が用意してあり、ウィンドウ下部のペインには
単純な（動作しない）画面が表示されている

コードを見てみると、以下の４つのReactコンポーネントがあることがわかる。
コンポーネントとは、UIを組み立てるための、小さく独立した部品を指す

コンポーネント
・Detail(入力用の明細)
・Summary(合計を表示)
・AdmissionFeeCalculator(明細、合計をまとめたもの)
・APP(最上位のコンポーネント)

Summaryコードの確認
class Summary extends React.Component {
  render() {
    return (
      <div>
        <div className="party">
          <input type="text" className="party" value="0" />
          <span>名様</span>
        </div>
        <div className="total-amount">
          <span>合計</span>
          <input type="text" className="total-amount" value="0" />
          <span>円</span>
        </div>
      </div>
    );
  }
}

コンポーネントはReact.Componentを継承したクラスとして作成し、Renderメソッドを実装する。
Renderメソッドでは、JSXと呼ばれる構文で記述したDOMの表現を返却する。
JSXは基本的にHTMLの構文で記述することができるが、以下の点に注意する
・最上位の要素は１つでなければならない（コードサンプルではdiv要素）
・class属性はTypeScriptの予約語と重複するため、classNameと書く必要がある
・label要素のfor属性はhtmlForと書く、等
